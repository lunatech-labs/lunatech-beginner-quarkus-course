# Configure Logging
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true

# Configure Jaeger tracer
quarkus.jaeger.service-name=hikea
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1

# Datasource Configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres

# Hibernate
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true

# So the React app can talk to us.
quarkus.http.cors=true

# Configure the SmallRye Kafka connector
kafka.bootstrap.servers=127.0.0.1:9092

mp.messaging.outgoing.raw-prices-out.connector=smallrye-kafka
mp.messaging.outgoing.raw-prices-out.topic=raw-prices
mp.messaging.outgoing.raw-prices-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.incoming.raw-prices-in.connector=smallrye-kafka
mp.messaging.incoming.raw-prices-in.topic=raw-prices
# TODO: check if this configuration is picked up automatically based on the classname!
mp.messaging.incoming.raw-prices-in.value.deserializer=com.lunatech.training.quarkus.pricing.PriceDeserializer

# TODO
# mp.messaging.incoming.raw-prices-in.failure-strategy=dead-letter-queue



mp.messaging.outgoing.prices-out.connector=smallrye-kafka
mp.messaging.outgoing.prices-out.topic=prices
mp.messaging.outgoing.prices-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.prices-in.connector=smallrye-kafka
mp.messaging.incoming.prices-in.topic=prices
mp.messaging.incoming.prices-in.value.deserializer=com.lunatech.training.quarkus.pricing.PriceDeserializer
